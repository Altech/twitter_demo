* 可視化
- 対象データ :: Twitterの2部グラフの解析結果
 - 5万-1000万とかそんな感じのスケール
 - それぞれのユーザーごとに、同じ集合内のtopk（idのリスト）ともう片方の集合に対するtopkという2つのリストを持つ。
  - 実際には、一般人の一般人に対するtopkと、一般人の有名人に対するtopkを使う予定。有名人-有名人間のtopkは分割で断絶してるから面白くなさそう。
  - RWRのスコアは使えるのか？ => とりあえず順位だけ使う。スコアを引数化しておけば、あとでスコアを考慮できるよう変更可能なはず。
 - ある時刻ごとのスナップショットを取得して、それを繋げてアニメーションにする感じ
 - 特定ユーザーにフォーカスすれば、データは大したサイズにはならないだろうが、ユーザーA→ユーザーB→という風にフォーカスを移動していけるようなのを考えると、全データが必要そう。
  - KVSとかに全体を突っ込んでおいて、原則demand-drivenでデータを引いてくる必要性.
   - 先読みのバッファはある程度あったほうがいいが。
 - コンテクスト :: iPhone4の発表6/7,発売6/24
  - 対象ユーザー :: Mac
 - 準備 :: 
- 伝えたいこと :: Twitterの一般ユーザーの関係が時々刻々と変化していく様子
 - これ自体はアイデアは単純。配置の方法を調べて実装すればいいはず。
 - 有名人に対するリツイートを元にしているので、その辺を必要に応じて可視化したい
  - つまり、その時々のトレンドを横に表示できるといい？そのトレンドに乗ったユーザー同士が近付いている、というのが分かるといい
- 仕様 ::
 - 時刻のナビゲーションバーを設置する（時間軸で見る）
  - どういう風に遷移できる？ 
 - その時々でフォーカスできるユーザーは一人.
  - そうすれば、遷移はその人のtopk、せいぜいその周辺のtopkに限ることができる。
 - ユーザーは、原則アイコンで表示する(identifierとして適切)
  - TwitterAPIを使う？=> 無理そう。現時点で存在しないユーザーは？=> とりあえず名前だけで実装する。
  - クリックしたときに、モーダルで詳細情報を見れるようにしたい。
   - そのユーザーの有名人に対するtopkと、そのユーザーのページへのリンク、など。
- 実装 ::
 - 使う言語 :: Java ? Scala ? JavaScript ? CoffeeScript ? 
 - Java/Scalaはよさげだけどアプレットの制限とかどうなの？
 - JS/CSだとConcurrentな処理できないし、データ受信全部Ajax使う必要あるし、めちゃくちゃしんどそう。
 - 開発効率考えると、プロトタイプをProcessing.appで作ってロジック部分固めるのは必要そう。
 - 結局Scalaか。Scalaの中でProcessingを組み込んで、アプレットにできることをさっと確認できたら、Scalaを使う。
  - アプレットの中から実行時に外部のRedisにアクセスしてデータ取得してくるみたいなの可能かチェックする必要ある。
* 概要
** コンテクスト
iPad2の発表前後を可視化
** 可視化
- あるユーザーのtopkの変化を可視化する
 - バネモデルで表現（３次元的に？）
- 時間軸で操作できるようにしたい
- フレームで縦分割してもう片方にTLを表示できるといい
 - つまり解析結果とは別に何らかのコンテクストが分かるようなのが欲しい
** データ
全体のスナップショットを取るのは量的に無理なので、適当に選んだユーザーのtopkを使う。いくらかやってみてよさげなのを使う。
** 技術
Scalaはだいたい覚えた。proguardとかいうのでScalaのランタイム圧縮してアプレットにできることを確認した。JavaのGUIライブラリであるSwingをラップしたのがScalaにあるみたいなのでそれを上手く使えるよやりやすそう。

* ToDo
** 下調べ
*** 外枠だけやってみる。
 - 結局Scalaか。Scalaの中でProcessingを組み込んで、アプレットにできることをさっと確認できたら、Scalaを使う。
  - http://d.hatena.ne.jp/alpha_neet/20110706/1309901375
   - まさにそれっぽいことしてる人いた。
  - アプレットの中から実行時にサーバーのKVSにアクセスしてデータ取得してくるみたいなの可能かチェックする必要ある。
  - Processingの部分をうまく局所化できないならあんまりScala使う意味ないような。
*** Scalaざっくりおぼえる（一日くらい？）
*** 調査結果
**** クライアントサイドのGUI環境について
- JavaにはawtというGUIのベーシックなライブラリがある
- それをラップしたSwingという使いやすいライブラリがある
 - JavaのSwingをラップしたScala.Swingというのもある
- アプレットというのは、awtのコンテナクラスであるパネルというのを継承している
 - パネルはそれ自体ウィンドウのように振舞う
 - addでどんどんコンポーネントを突っ込める
 - 従って、ブラウザが直接参照するアプレットがルートになり、それに対してProcessingApplet、操作用Appletなどを埋め込んでやればよい
**** Scalaでアプレットするには
Scalaのランタイムを一緒に付けてやる必要があって、そのままだと重いのでproguardとかいうjar圧縮ツールを使う必要がある

** データ準備
*** Twitterデータのサイズ縮小…できない。どうしよ。有名人サイズ1万に変更か・・・。
*** 一般人-有名人間のtopk出力の実装
*** Redisに突っ込めることを確認する（キーの仕様は後回し）
** プロトタイピング
*** Processing.appあたりを使って、グラフのビジュアライズのロジックの部分などをざっくり
この時点ではデータは全てメモリに載せときたい
**** ロジック調査する
**** フォーカス移動できるようにする
*** 色付け、インターフェース充実させるなど
** 読み込み部分の処理実装する
バッファとか、先読みのルールとか、どのくらいまで表示ととか決めてKVSから取ってくる。並行モデルが欲しい。Scalaにはアクターがあるらしい。
** アプレットにする
プロトタイプを元に。

** 
37019708(AppleNews)のTopをいくらか抽出し、それに対してビジュアライズを行う
ビジュアライズは、単純にtopkが入れ替わる様子

* ToDo2
** データセットの準備
- 関連性データ、時刻データ、エッジIDからユーザーIDを出すデータ、ユーザーIDからユーザー名を出すデータ
 - 前処理Rubyスクリプト
   - エッジIDはどうでもいいのであらかじめ全てユーザーIDにしておく
     - これは前処理。
   - シーケンスナンバーもどうでもいいので予め全て時刻にしておく
     - これはオブジェクト内でハッシュを持っておく。
 - 関連性格納オブジェクト
   - 「あるユーザーの関連性の系列」が欲しいので、あるユーザーに関するインスタンスを作れるようにする
   - ProximityContainerクラス（ハッシュ）、new (data source)
   - p_container.find(user_id: Int) => proximity: List[(Time,List)]（時刻とTopkのタプルのリスト）
 - アニメーション
  - 三次元上で表されるバネモデルを使う
  - 状態
    - 時刻
    - それぞれの位置
* ToDo3
- 初期化
 - 初期位置の計算、初期時刻の代入
- 位置計算クラスを、初期化と自然長変更、積分更新に分ける
- コンテナクラスにIDと名前のMapを追加する
- 対象ユーザーを変更できるようにする
* ToDo4
** DONE データ
- iPad2発表周辺でリツイートの多いユーザーを1000人決定。それに対してtop1000を取得。
** DONE アニメーション
- アニメーション（topkのupdate）を実装する
** DONE フレームつくり直す
** DONE ユーザーを変更できるようにする
- ボタン設置、再初期化関数
** トップNを変更できるようにする
  - 状態N、ボタン設置、再描画
  - 画面内に収まるように座標のスケール計算させる
** 見た目
- アイデンティティの設置
  - 名前取得
  - 対応するアイコンを取ってくる、どう表示するか？
** DONE バグフィックス
時間取ってくるスクリプト間違ってるっぽい。-> topnのシーケンスが0始まりだった。
* ToDo5
** 画面から飛び出るのどうにかする
- 小さい穴から覗き込むようにすればいいはず
** topnの表示前に出す
** DONE 終了処理実装する
** DONE TopNを変更できるようにする
- インジケーター設置、各種定数調整
** 名前表示する
- topnから最小限のuser_nameのjsonを生成するrubyスクリプト書く
- userlistからmapとして読み込む
- きれいに表示する
** topnをグラデーションにする
** 背景を綺麗にする
クラウド的な
** ページ遷移
- 二部グラフの絵が出て、何をやってるか説明できるとよい。
** ターゲットユーザーのアブストラクト表示する
- TwitterAPIを使う
** ズーム機能実装する

* 準備
- Wikipediaの出力見てFBUの整合性確かめる
- Twitter、Wikipediaともに精度などを図れるサイズを決定する
  
* 評価
- FBUとスループット
 - グラフ分割1で10000~30000の間、大きめ固定
 - k : 1,10,100,1000
 - 一回のバッチアップデートの時間も（レイテンシ）
- 分割数＊ストリーム処理 の精度低下（スケール固定）
 - 基準は分割0のストリーム処理（not RWR）、Wikipedia、Twitter
- 簡易RWR、METIS
- 関連性出力の時間 分割数ごと
 - 分割数、データはTwitter、Wikipedia
- 分割数と｛バッチ実行時間、ストリームスループット｝の関係
 - Wikipedia（大と普通）、Twitter（普通）
- kと精度（比較元：k固定、比較対象でｋを動かす）、対象分割数は1,2ケース
 - WikipediaとTwitterどっちか？

- FBUとスループット
 - グラフ分割1で10000~30000の間、大きめ固定
 - k : 1,10,100,1000
 - 一回のバッチアップデートの時間も（レイテンシ）
- 分割数＊ストリーム処理 の精度低下（スケール固定）
 - 基準は分割0のストリーム処理（not RWR）、Wikipedia、Twitter
- 簡易RWR、METIS
- 関連性出力のスループット（大きめのグラフで）
- 関連性出力の時間 分割数ごと
 - 分割数、データはTwitter、Wikipedia
- 分割数と｛バッチ実行時間、ストリームスループット｝の関係
 - Wikipedia（大と普通）、Twitter（普通）
- kと精度（比較元：k固定、比較対象でｋを動かす）、対象分割数は1,2ケース
 - WikipediaとTwitterどっちか？

# k決定 DONE
Wikipedia(10000) 1 , k : [1,10,100,1000].each do 
 スループット 
 一回のバッチアップデートの時間も（レイテンシ）(fin)
end

# 
kは100で決定。

# 分割数ごと
Wikipedia(10000) 1,4,8 Twitter(10000) 1,4,8 .each do
 バッチ処理時点での精度(fin)
 ストリーム処理中の精度(fin)
 バッチ処理実行時間(fin)
 METIS実行時間(fin)
 簡易RWR実行時間(fin)
end

Wikipedia(10000) 1,4,8 Twitter(10000) 1,4,8 .each do 
 ストリーム処理スループット（精度出力を停止する実装）
 クエリースループット
end



# 性能測定
Wikipedia(200000) 8,16,32 .each do 
 バッチ処理時点での精度
 バッチ処理実行時間
 ストリーム処理のスループット
end


- デモのための変化データ


* 結果
** k（Batch-Updateの間隔）の決定
*** Throughput 
- 1 :: 33.10958116425272,
- 10 :: 172.16829339841735,
- 100 :: 253.07332364712317,
- 500 :: 284.8065864889954,
- 1000 :: 261.8251914147528,
- 5000 :: 230.99010990897494
*** Latency
- 1 :: 2.8160945,
- 10 :: 0.7103188750000005,
- 100 :: 0.4038232500000003,
- 500 :: 2.087455875,
- 1000 :: 4.345896625,
- 5000 :: 55.835670625

** Wikipedia
*** バッチ処理時点での精度
- 1 :: 1.0(define)
- 3 :: 95.59
- 6 :: 90.44
*** ストリーム処理中の精度
- 1 :: 1.0(define)
- 3 :: {0=>95.58999999999993,
   2501=>94.70999999999994,
   5001=>94.68999999999993,
   7501=>94.15999999999995,
   10001=>93.73999999999995,
   12394=>93.48999999999998,
   12501=>93.50999999999998,
   15001=>93.52999999999997,
   17501=>93.49999999999997,
   20001=>93.46999999999997,
   22501=>93.47999999999998,
   23969=>92.67999999999998,
   25001=>92.68999999999997,
   27501=>92.65999999999997,
   30001=>92.39999999999996,
   32501=>91.48999999999995,
   35001=>91.47999999999996,
   35778=>94.08999999999995,
   37501=>94.08999999999995,
   40001=>94.11999999999995,
   42501=>94.04999999999995,
   45001=>93.75999999999993,
   47501=>93.48999999999995,
   47592=>95.01999999999998,
   50001=>93.91999999999997,
   52501=>93.90999999999997,
   55001=>93.31999999999996,
   57501=>93.33999999999996,
   59611=>92.33999999999993,
   60001=>92.35999999999993,
       62501=>92.37999999999992,
   65001=>92.40999999999994,
   67501=>91.81999999999995,
   70001=>91.82999999999994,
   72501=>91.93999999999994,
   73830=>93.64999999999998,
   75001=>93.58999999999999,
   77501=>93.36999999999996,
   80001=>93.03999999999998,
   82501=>93.01999999999998,
   85001=>92.46999999999996}
- 6 :: {0=>90.43999999999994,
   2501=>89.65999999999994,
   5001=>89.64999999999995,
   7501=>89.57999999999994,
   10001=>89.56999999999994,
   12394=>90.56999999999996,
   12501=>90.59999999999997,
   15001=>90.55999999999999,
   17501=>90.52999999999999,
   20001=>90.52999999999997,
   22501=>90.54999999999997,
   23969=>90.53999999999995,
   25001=>90.51999999999994,
   27501=>90.55999999999995,
   30001=>90.26999999999994,
   32501=>89.37999999999994,
   35001=>89.34999999999994,
   35778=>91.74999999999996,
   37501=>91.72999999999996,
   40001=>91.71999999999997,
   42501=>91.70999999999997,
   45001=>91.42999999999995,
   47501=>91.17999999999994,
   47592=>91.01,
   50001=>90.2,
   52501=>90.17000000000002,
   55001=>89.71000000000001,
   57501=>89.77,
   59611=>89.37999999999992,
   60001=>89.37999999999992,
   62501=>89.36999999999993,
   65001=>89.42999999999995,
   67501=>89.34999999999995,
   70001=>89.34999999999997,
   72501=>89.49999999999996,
   73830=>91.33999999999997,
   75001=>91.31999999999996,
   77501=>91.09999999999997,
   80001=>90.76999999999998,
   82501=>90.74999999999996,
   85001=>90.21999999999997}
- SequenceNumberToDate :: {0=>"2007-3-26",
   2501=>"2007-3-26",
   5001=>"2007-3-26",
   7501=>"2007-3-26",
   10001=>"2007-3-26",
   12394=>"2007-3-27",
   12501=>"2007-3-27",
   15001=>"2007-3-27",
   17501=>"2007-3-27",
   20001=>"2007-3-27",
   22501=>"2007-3-27",
   23969=>"2007-3-28",
   25001=>"2007-3-28",
   27501=>"2007-3-28",
   30001=>"2007-3-28",
   32501=>"2007-3-28",
   35001=>"2007-3-28",
   35778=>"2007-3-29",
   37501=>"2007-3-29",
   40001=>"2007-3-29",
   42501=>"2007-3-29",
   45001=>"2007-3-29",
   47501=>"2007-3-29",
   47592=>"2007-3-30",
   50001=>"2007-3-30",
   52501=>"2007-3-30",
   55001=>"2007-3-30",
   57501=>"2007-3-30",
   59611=>"2007-3-31",
   60001=>"2007-3-31",
   62501=>"2007-3-31",
   65001=>"2007-3-31",
   67501=>"2007-3-31",
   70001=>"2007-3-31",
   72501=>"2007-3-31",
   73830=>"2007-4-1",
   75001=>"2007-4-1",
   77501=>"2007-4-1",
   80001=>"2007-4-1",
   82501=>"2007-4-1",
   85001=>"2007-4-1"}
*** バッチ処理実行時間(s)
- 1 :: 13431
- 3 :: 1402
- 6 :: 300
*** Each:バッチ処理実行時間(s)
- 1 :: [13431.0]
- 3 :: [579,1402,161]
- 6 :: [300,30,72,23,18,15]
*** METIS実行時間(s)
- 1 :: 1
- 3 :: 1
- 6 :: 1
*** 簡易RWR実行時間(s)
- 1 :: 4
- 3 :: 4
- 6 :: 4
*** スループット(edge/s)
- 1 :: 16.0 
- 3 :: 88.5
- 6 :: 162.3

** Twitter
*** バッチ処理時点での精度
- 1 :: 1.0(define)
- 3 :: 90.05
- 6 :: 85.23
*** ストリーム処理中の精度
- 1 :: 1.0(define)
- 3 :: {0=>90.04999999999994,
   5001=>84.32,
   10001=>81.09,
   15001=>80.14999999999998,
   20001=>78.41000000000001,
   25001=>76.53000000000002,
   30001=>73.69000000000003,
   35001=>69.89999999999999,
   40001=>67.63999999999999,
   45001=>68.02000000000001,
   49823=>90.24999999999993,
   50001=>90.29999999999993,
   55001=>86.50999999999995,
   60001=>84.00999999999998,
   65001=>82.24999999999997,
   70001=>80.93999999999998,
   75001=>80.37999999999998,
   80001=>77.75999999999995,
   85001=>75.80999999999999,
   90001=>42.210000000000036,
   95001=>17.549999999999997,
   100001=>41.640000000000015,
   104206=>89.64999999999999,
   105001=>89.14999999999999,
   110001=>85.71,
   115001=>83.06000000000002,
   120001=>79.75000000000003,
   125001=>79.41000000000001,
   130001=>75.02,
   135001=>74.67999999999999,
   140001=>75.87,
   145001=>74.09999999999998,
   150001=>73.15999999999998,
   153873=>88.0,
   155001=>85.86999999999998,
   160001=>82.88000000000001,
   165001=>79.45,
   170001=>77.80999999999999,
   175001=>76.77999999999999,
   180001=>76.34999999999998,
   185001=>75.25999999999998,
   190001=>73.39,
   195001=>70.81999999999996,
   200001=>68.64999999999999,
   203461=>89.74999999999999,
   205001=>88.69999999999997,
   210001=>81.46,
   215001=>79.49,
   220001=>79.25999999999999}
- 6 :: {0=>85.22999999999999,
   5001=>79.67,
   10001=>75.80999999999997,
   15001=>74.89999999999999,
   20001=>74.42999999999999,
   25001=>72.37999999999997,
   30001=>69.94999999999999,
   35001=>65.27999999999999,
   40001=>63.429999999999986,
   45001=>63.9}
- SequenceNumberToDate :: {0=>"2011-9-1",
   5001=>"2011-9-1",
   10001=>"2011-9-1",
   15001=>"2011-9-1",
   20001=>"2011-9-1",
   25001=>"2011-9-1",
   30001=>"2011-9-1",
   35001=>"2011-9-1",
   40001=>"2011-9-1",
   45001=>"2011-9-1",
   49823=>"2011-9-2",
   50001=>"2011-9-2",
   55001=>"2011-9-2",
   60001=>"2011-9-2",
   65001=>"2011-9-2",
   70001=>"2011-9-2",
   75001=>"2011-9-2",
   80001=>"2011-9-2",
   85001=>"2011-9-2",
   90001=>"2011-9-2",
   95001=>"2011-9-2",
   100001=>"2011-9-2",
   104206=>"2011-9-3",
   105001=>"2011-9-3",
   110001=>"2011-9-3",
   115001=>"2011-9-3",
   120001=>"2011-9-3",
   125001=>"2011-9-3",
   130001=>"2011-9-3",
   135001=>"2011-9-3",
   140001=>"2011-9-3",
   145001=>"2011-9-3",
   150001=>"2011-9-3",
   153873=>"2011-9-4",
   155001=>"2011-9-4",
   160001=>"2011-9-4",
   165001=>"2011-9-4",
   170001=>"2011-9-4",
   175001=>"2011-9-4",
   180001=>"2011-9-4",
   185001=>"2011-9-4",
   190001=>"2011-9-4",
   195001=>"2011-9-4",
   200001=>"2011-9-4",
   203461=>"2011-9-5",
   205001=>"2011-9-5",
   210001=>"2011-9-5",
   215001=>"2011-9-5",
   220001=>"2011-9-5",
   225001=>"2011-9-5",
   230001=>"2011-9-5",
   235001=>"2011-9-5",
   240001=>"2011-9-5",
   245001=>"2011-9-5",
   250001=>"2011-9-5",
   255001=>"2011-9-5",
   256972=>"2011-9-6",
   260001=>"2011-9-6",
   265001=>"2011-9-6",
   270001=>"2011-9-6",
   275001=>"2011-9-6",
   280001=>"2011-9-6",
   285001=>"2011-9-6",
   290001=>"2011-9-6"}
*** バッチ処理実行時間(s)
- 1 :: 19789.0
- 3 :: 3940
- 6 :: 1038
*** Each:バッチ処理実行時間(s)
- 1 :: [19789.0]
- 3 :: [339,3940,3501]
- 6 :: [68,714,848,920,1038,948]
*** METIS実行時間(s)
- 1 :: 2
- 3 :: 2
- 6 :: 3
*** 簡易RWR実行時間(s)
- 1 :: 11
- 3 :: 10
- 6 :: 11
*** スループット(edge/s)
- 1 :: 16.5
- 3 :: 21.5
- 6 :: 95.7


* 逆行列計算について
** 遅くなった原因
先日StreamGraphのバッチ処理がどうも以前に比べて非常に時間がかかるということに気づいて、上野さんにも協力していただき調査した結果、どうも重み付けによるものであるということが分かった。
もともとWikipediaの分割結果がロングテールみたいになっているっていうのがあって、テイルの方はゼロがたくさんある感じだった。以前までは実行時間は基本的に変わらなかったのだけど、重み付けを行ってから実行時間もそれに比例するような感じになってしまい、一番時間のかかるサブグラフに律速されることから、バッチ処理の実行時間自体が１００倍程度遅くなってしまった。
原因については、まずサブグラフの隣接行列をダンプして現在のGotoBlasではなく以前のAtlasで計算させたけど結果は変わらず。そこで重み付け係数を1.0にしたところ、以前の実行時間と同じ結果が出た。ゼロ要素がたくさんあったり、重みが1とか2みたいに単純で打ち消しあいうるようなものだと早いということだろうか。
単純に考えられるる解決としては、Splitの全体グラフはそのままfloatで持っておいて、METISに突っ込む段階あたりで、適当に小さい整数に押し込める感じのがある。

** これから
ただ考えなおしてみると別にバッチ処理ってそこまで早くなくてよくて、問題だったのは今回デモのために評価するのが難しかったという点でいつの間にか問題がすり替わってた気がする。311は結局適当にソースデータをコンバートしてスケールを1/10にして解決。これで有用な結果が出るというのは言い換えれば過去の蓄積は指数重み付けの上ではそれほど必要でもないというのがあって頂点削除はやっぱり必要だったかなというのはある。

* アプリケーションとして
** 境界部分をどう実装するか
なんというかアプリケーションとして使う上では単純に性能がどうとかの他にも注意しなきゃいけないことってたくさんあって、特に本体とそれを集計したり表示したりする境界部分をどうするか、っていうのは実験する上でも大事だなと思った。今まであまり注意を払ってなかった。
StreamGraphは性能を出すためにアプリケーション本体がC++で実装されているのだけど、こういうパターンだと境界から先は別の言語になると思う。ウェブだとRupy、数値計算たくさんやりたいときはPythonみたいな。で、そうなると変更に強くてシームレスな感じでデータを受け渡しできて欲しくて、結局JSONが一番いいんじゃないかと思った。他に考えられる形式としてはcsv,yamlとかがあって、csvは最初使ってたけどパースが順序に依存するので変更に弱くて、パースがよっぽど時間がかかるとかじゃない限りcsvにする理由なさそう。そしてRubyでやった結果JSONでも十分速かった。yamlはデータがJSONに比べて見やすいというのはあるけれど、たしか配列とか扱えない気がするので、大抵の言語に自然なデータ構造として取り込めるJSONがこの中だと一番よさそう。
あと実験上だと色々な角度でデータを眺めたいというのがあって、以前まで設定ごとにディレクトリ階層深くしていって分けるみたいなのやってたけど設定が増えた時とか階層構造変わっちゃって変更に弱かった。機能分離の観点から、データの保存と整理というのは別々にしておくべきで、保存に関しては単一ディレクトリに時刻で名前付して突っ込むのがよさげ。あとデータを色々な角度で眺めるみたいなのだとリレーショナルデータベースにいれといていろんな切り方するみたいなの考えてて、でもとりあえず現状は十分そうなのでやっていない。ブラウザをインターフェースにする感じだと間接層にRDBが入ってきて、アプリケーションの出力をRDBに入れるというのはありそうだと思った。

** 設定をどうするか
C++をRubyの感覚で使ってるせいでマクロがどんどん増えていって非常によくないのだけど、かといってSystemSのdpsファイルのオプション指定部分に書くというのも微妙。あそこ自体は簡単に書けるけど結局オペレータのイニシャライザの部分でパースしてやらなきゃいけないので、変更するたびに同じことを二箇所にしなきゃいけないのがしんどい。
設定ファイルってしばしばxmlで記述されるのだけど、少ない経験から言うとxmlは書き方にミスが生じているのではっていう疑念が生じてよくない。イメージとしては一望できて追加が容易で多少プログラマブルなのが良いと思う。ただこのテーマは考えるにはC++の言語仕様をちゃんと把握してる方がいい気がするのでとりあえず考えないことにする。

** 関係ないけどBloggerが
なんか使いにくい。Googleの他のサービスと全然連携できてない感じがもったいない。まとまった文章書く需要ってまだまだあるとおもうんだけど現状のblogサービスはなんか書くコストが多くて良くない。とりあえずメインでははてな使ってるけど、歴史的経緯な感じがある。
